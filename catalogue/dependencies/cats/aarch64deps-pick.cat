(* Dependency through registers and memory *)
let rec dtrm =
  rf-reg \ ([W & range(lxsx)];rf-reg)
  | rfi
  | iico_data
  | dtrm; dtrm

let Reg=~M | ~BR
(** Data, Address and Control dependencies *)
let ADDR=NDATA
let basic-dep =
   [R|Rreg]; dtrm?
let data = basic-dep; [DATA]; iico_data; [W]
let addr = basic-dep; [ADDR]; iico_data; [M]
let ctrl = basic-dep; [BR]; po

(** Pick dependencies *)
let pick-basic-dep =
   [R|Rreg]; dtrm?; [Reg]; iico_ctrl; [Reg]; dtrm?
let pick-addr-dep =
   pick-basic-dep; [ADDR]; iico_data; [M]
let pick-data-dep =
   pick-basic-dep; [DATA]; iico_data; [W]
let pick-ctrl-dep =
   pick-basic-dep; [BR]; po
let pick-dep =
(
   pick-basic-dep |
   pick-addr-dep  |
   pick-data-dep  |
   pick-ctrl-dep
)
