AArch64 "ARMv8 AArch64"
catdep (* This option tells that the cat file computes dependencies *)

(*
 * Include the cos.cat file shipped with herd.
 * This builds the co relation as a total order over writes to the same
 * location and then consequently defines the fr relation using co and
 * rf.
 *)
include "cos.cat"

(* Local read successor *)
let lrs = [W]; (po-loc \ (po-loc;[W];po-loc)) ; [R]

(* Local write successor *)
let lws = po-loc; [W]

(*
 * Include aarch64fences.cat to define barriers.
 *)

include "aarch64fences.cat"

(*
 * Include aarch64deps.cat to define dependencies.
 *)
include "always-executed-writes.cat"
include "aarch64deps-down-one-leg.cat"

(* Show relations in generated diagrams *)
include "aarch64show.cat"

(*
 * As a restriction of the model, all observers are limited to the same
 * inner-shareable domain. Consequently, the ISH, OSH and SY barrier
 * options are all equivalent to each other.
 *)
let dsb.full = DSB.ISH | DSB.OSH | DSB.SY
let dsb.ld = DSB.ISHLD | DSB.OSHLD | DSB.LD
let dsb.st = DSB.ISHST | DSB.OSHST | DSB.ST

(*
 * A further restriction is that standard litmus tests are unable to
 * distinguish between DMB and DSB instructions, so the model treats
 * them as equivalent to each other.
 *)
let dmb.full = DMB.ISH | DMB.OSH | DMB.SY | dsb.full
let dmb.ld = DMB.ISHLD | DMB.OSHLD | DMB.LD | dsb.ld
let dmb.st = DMB.ISHST | DMB.OSHST | DMB.ST | dsb.st

(* Flag any use of shareability options, due to the restrictions above. *)
flag ~empty (dmb.full | dmb.ld | dmb.st) \
	    (DMB.SY | DMB.LD | DMB.ST | DSB.SY | DSB.LD | DSB.ST)
	    as Assuming-common-inner-shareable-domain

(* Intrinsic order *)
let intrinsic = (iico_data|iico_ctrl)+

(* Coherence-after *)
let ca = fr | co

(* Observed-by *)
let obs = rfe | fre | coe

(* Read-modify-write *)
let rmw = lxsx | amo

(* Dependency-ordered-before *)
let dob = addr | data | ctrl; [W]
	| (ctrl | (addr; po)); [ISB]; po; [M]
	| addr; po; [W]
	| (addr | data); lrs
show ctrl;[M] as ctrl

(* Atomic-ordered-before *)
let aob = rmw
	| rmw; lrs; [A | Q]

(* Barrier-ordered-before *)
let bob = po; [dmb.full]; po
        | po; ([A];amo;[L]); po
	| [L]; po; [A]
	| [R\NoRet]; po; [dmb.ld]; po
	| [A | Q]; po
	| [W]; po; [dmb.st]; po; [W]
	| po; [L]

(* Tag-ordered-before *)
let tob = [R & T]; iico_data; [BR]; iico_ctrl; [M \ T]

(* Locally-ordered-before *)
let rec lob = lws; si
            | dob
            | aob
            | bob
            | tob
            | lob; lob

(* Ordered-before *)
let rec ob = obs; si
        | lob
	| ob; ob

(* Tag-location-ordered *)
let tlo = [R & T]; tob; loc; tob^-1; [R & T]

(* Internal visibility requirement *)
let po-loc =
  let Exp = M\domain(tob) in
  (po-loc & Exp*Exp) | (po & tlo)
acyclic po-loc | ca | rf as internal

(* External visibility requirement *)
irreflexive ob as external

(* Atomic: Basic LDXR/STXR constraint to forbid intervening writes. *)
empty rmw & (fre; coe) as atomic
